---
import Base from "../layouts/Base.astro";
---

<Base title="Dong Web">
  <script>
    declare global {
      interface Uint8Array {
        toBase64(): string;
      }
    }

    class CreateDong extends HTMLElement {
      connectedCallback() {
        const shadow = this.attachShadow({ mode: "open" });

        // create input
        const form = document.createElement("form");
        const imageSelect = document.createElement("input");
        const audioSelect = document.createElement("input");
        const createButton = document.createElement("button");

        imageSelect.type = "file";
        imageSelect.accept = "image/*";
        audioSelect.type = "file";
        audioSelect.accept = "audio/*";
        createButton.type = "submit";
        createButton.textContent = "Create";

        form.appendChild(imageSelect);
        form.appendChild(audioSelect);
        form.appendChild(createButton);

        shadow.appendChild(form);

        // functionality
        createButton.addEventListener("click", async (e) => {
          // don't refresh
          e.preventDefault();
          // quit early if no files
          if (
            !imageSelect.files ||
            !audioSelect.files ||
            imageSelect.files.length === 0 ||
            audioSelect.files.length === 0
          )
            return console.warn("No files selected");

          // get files
          const image = imageSelect.files[0];
          const audio = audioSelect.files[0];

          if (image.type === "" || audio.type === "")
            return console.warn("Mime types invalid");

          console.log(
            image.size,
            audio.size,
            await image.bytes(),
            await audio.bytes()
          );

          const dongFile = new File(
            [
              // version
              (() => {
                const version = new Int8Array(new ArrayBuffer(2));
                version[0] = 0xd0;
                version[1] = 2;
                return version;
              })(),
              // image type
              image.type,
              // 00 padding
              new ArrayBuffer(256 - image.type.length),
              // image size
              (() => {
                const value = new Uint32Array(1);
                value[0] = image.size;
                console.log("image size: ", image.size, value);
                return value;
              })(),
              // audio type
              audio.type,
              // 00 padding
              new ArrayBuffer(256 - audio.type.length),
              // audio size
              (() => {
                const value = new Uint32Array(1);
                value[0] = audio.size;
                console.log("audio size: ", audio.size, value);
                return value;
              })(),
              // image data
              await image.bytes(),
              // audio data
              await audio.bytes(),
            ],
            `${prompt("Filename:") ?? "file"}.dong`,
            {
              type: "application/prs.vielle.dong",
            }
          );

          console.log(
            dongFile,
            dongFile.size,
            await dongFile.text(),
            await dongFile.bytes()
          );

          // download the dong file
          const url = URL.createObjectURL(dongFile);
          const a = document.createElement("a");
          a.href = url;
          a.download = dongFile.name;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        });
      }
    }

    class LoadDong extends HTMLElement {
      connectedCallback() {
        const shadow = this.attachShadow({ mode: "open" });

        // create input
        const form = document.createElement("form");
        const dongSelect = document.createElement("input");
        const loadButton = document.createElement("button");
        // image
        const image = document.createElement("img");

        dongSelect.type = "file";
        dongSelect.accept = ".dong";
        loadButton.type = "submit";
        loadButton.textContent = "Load";
        image.width = 256;
        image.height = 256;

        form.appendChild(dongSelect);
        form.appendChild(loadButton);

        shadow.appendChild(form);
        shadow.appendChild(image);

        const sheet = new CSSStyleSheet();
        sheet.replaceSync(`
            image {
                border: 1px solid white;
            }
        `);

        shadow.adoptedStyleSheets = [sheet];

        // functionality
        loadButton.addEventListener("click", async (e) => {
          // don't refresh
          e.preventDefault();
          // quit early if no files
          if (!dongSelect.files || dongSelect.files.length === 0)
            return console.warn("No files selected");

          // get files
          const dongFile = dongSelect.files[0];

          console.log(dongFile, dongFile.size); //, await dongFile.bytes());

          // get first 2 bytes and verify
          const version = new Uint8Array(await dongFile.slice(0, 2).bytes());
          if (version[0] !== 0xd0 || version[1] !== 2)
            return console.warn("Invalid file");

          // get next 256 bytes and get mime type
          const imgMimeType: string | undefined = (
            await dongFile.slice(2, 258).text()
          ).match(/[a-zA-Z0-9.]+\/[a-zA-Z0-9.]+/gm)?.[0];
          if (!imgMimeType) return console.warn("Image mime type parse failed");

          // get next 4 bytes and get image size
          const imgSize = new Uint32Array(
            (await dongFile.slice(258, 262).bytes()).buffer
          )[0];

          // get next 256 bytes and get mime type
          const audMimeType: string | undefined = (
            await dongFile.slice(262, 518).text()
          ).match(/[a-zA-Z0-9.]+\/[a-zA-Z0-9.]+/gm)?.[0];
          if (!audMimeType) return console.warn("Audio mime type parse failed");

          // get next 4 bytes and get image size
          const audSize = new Uint32Array(
            (await dongFile.slice(518, 522).bytes()).buffer
          )[0];

          const imageBytes = await dongFile.slice(522, 522 + imgSize).bytes();
          const audioBytes = await dongFile
            .slice(522 + imgSize, 522 + imgSize + audSize)
            .bytes();

          image.src = `data:${imgMimeType};base64,${imageBytes.toBase64()}`;

          // audio play
          const audio = document.createElement("audio");
          audio.src = `data:${audMimeType};base64,${audioBytes.toBase64()}`;
          audio.play();

          console.log(
            imgMimeType,
            audMimeType,
            imgSize,
            audSize,
            imageBytes,
            audioBytes,
            btoa(String.fromCharCode(...imageBytes)),
            image,
            shadow
          );
        });
      }
    }

    customElements.define("create-dong", CreateDong);
    customElements.define("load-dong", LoadDong);
  </script>

  <create-dong></create-dong>
  <load-dong></load-dong>

  <!-- <form action="">
    <label for="image">
      Pick an image file
      <input type="file" id="image" name="image" accept="image/*" />
    </label>
    <label for="audio">
      Pick an audio file
      <input type="file" id="audio" name="audio" accept="audio/*" />
    </label>
    <button id="create">Create</button>
  </form> -->
  <!-- <form action="">
    <label>
      Pick a dong file
      <input type="file" id="dong" name="dong" accept=".dong" />
    </label>
    <canvas id="renderer"></canvas>
  </form> -->
</Base>
