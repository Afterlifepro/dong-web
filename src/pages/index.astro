---
import Base from "../layouts/Base.astro";
---

<Base title="Dong Web">
  <script>
    import { createDong, download, readDong } from "../dong-io";

    declare global {
      interface Uint8Array {
        toBase64(): string;
      }
    }

    const blobBytes = async (blob: Blob) => {
      if ("bytes" in blob) return blob.bytes();
      return new Response(blob).arrayBuffer().then((buffer) => {
        const uint = new Uint8Array(buffer);
        return uint;
      });
    };

    const uint8array64 = (arru8: Uint8Array) => {
      if ("toBase64" in arru8) return arru8.toBase64();

      function _arrayBufferToBase64(bytes: Uint8Array) {
        var binary = "";
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
          binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary);
      }
      return _arrayBufferToBase64(arru8);
    };

    class CreateDong extends HTMLElement {
      connectedCallback() {
        // create input
        const form = document.createElement("form");

        const imageLabel = document.createElement("label");
        const audioLabel = document.createElement("label");
        const imageSelect = document.createElement("input");
        const audioSelect = document.createElement("input");

        const filename = document.createElement("input");
        const createButton = document.createElement("button");

        const errormsg = document.createElement("div");

        imageSelect.type = "file";
        imageSelect.accept = "image/*";
        imageSelect.id = "image-select";

        audioSelect.type = "file";
        audioSelect.accept = "audio/*";
        audioSelect.id = "audio-select";

        imageLabel.innerText = "Image";
        imageLabel.htmlFor = imageSelect.id;
        audioLabel.innerText = "Audio";
        audioLabel.htmlFor = audioSelect.id;

        createButton.type = "submit";
        createButton.textContent = "Create";

        imageLabel.appendChild(imageSelect);
        audioLabel.appendChild(audioSelect);

        form.appendChild(imageLabel);
        form.appendChild(audioLabel);
        form.appendChild(filename);
        form.appendChild(createButton);
        form.appendChild(errormsg);

        this.appendChild(form);

        // functionality
        createButton.addEventListener("click", async (e) => {
          // don't refresh
          e.preventDefault();
          // quit early if no files
          if (
            !imageSelect.files ||
            !audioSelect.files ||
            imageSelect.files.length === 0 ||
            audioSelect.files.length === 0
          ) {
            errormsg.innerText = "No files selected";
            return;
          }

          // get files
          const image = imageSelect.files[0];
          const audio = audioSelect.files[0];

          const res = await createDong(image, audio);
          // if error, show it
          if (typeof res === "string") {
            errormsg.innerText = res;
            return;
          }

          const dongFile = new File([res], `${filename.value}.dong`, {
            type: "application/prs.vielle.dong",
          });

          // download the dong file
          download(dongFile);
        });
      }
    }

    class LoadDong extends HTMLElement {
      connectedCallback() {
        // create input
        const form = document.createElement("form");
        const dongSelect = document.createElement("input");
        const loadButton = document.createElement("button");
        // image
        const errormsg = document.createElement("div");
        const image = document.createElement("img");

        // do not append as this is only for playing audio
        // loaded here to prevent overlaying the sound
        const audio = document.createElement("audio");

        dongSelect.type = "file";
        dongSelect.accept = ".dong";
        loadButton.type = "submit";
        loadButton.textContent = "Load";
        image.width = 256;
        image.height = 256;

        form.appendChild(dongSelect);
        form.appendChild(loadButton);

        this.appendChild(form);
        this.appendChild(image);
        this.appendChild(errormsg);

        // functionality
        loadButton.addEventListener("click", async (e) => {
          // don't refresh
          e.preventDefault();
          // quit early if no files
          if (!dongSelect.files || dongSelect.files.length === 0)
            return (errormsg.innerText = "No files selected");

          // get files
          const dongFile = dongSelect.files[0];

          const res = await readDong(dongFile, { b64: true });
          if (typeof res === "string") {
            errormsg.innerText = res;
            return;
          }

          image.src = `data:${res.image.mime};base64,${res.image.data}`;

          // audio play
          console.log("audio loaded")
          audio.src = `data:${res.audio.mime};base64,${res.image.data}`;
          console.log("audio played")
          console.log(audio.src)
          audio.play();
        });
      }
    }

    customElements.define("create-dong", CreateDong);
    customElements.define("load-dong", LoadDong);
  </script>

  <style slot="head" is:inline>
    button {
      background-color: #f80085;
    }

    label {
      background-color: #f80085;

      & > input[type="file"] {
        display: none;
      }
    }
  </style>

  <!-- logo -->

  <!-- creation -->
  <create-dong></create-dong>

  <hr />

  <!-- loading -->
  <load-dong></load-dong>
</Base>
